name: Build

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        include:
          - os: windows-latest
            os-short: windows
            architecture: x64
          - os: ubuntu-latest
            os-short: linux
            architecture: x64
          - os: macos-latest
            os-short: macos
            architecture: arm64

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Install Clang on Ubuntu"
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang lld llvm-dev
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV
          echo "/usr/bin" >> $GITHUB_PATH
          echo "CXXFLAGS=-mpclmul -msse4.1" >> $GITHUB_ENV

      - name: "Install Clang on macOS"
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm
          echo "CC=/opt/homebrew/opt/llvm/bin/clang" >> $GITHUB_ENV
          echo "CXX=/opt/homebrew/opt/llvm/bin/clang++" >> $GITHUB_ENV
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
          # SDKROOT is needed to locate the required headers...
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV
          echo "CXXFLAGS=-isysroot $(xcrun --show-sdk-path)" >> $GITHUB_ENV

      - name: "Get CMake"
        uses: lukka/get-cmake@latest

      - name: "Setup VCPKG"
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgConfigurationJsonGlob: '**/vcpkg-configuration.json'

      - name: Run CMake
        uses: lukka/run-cmake@v10
        with:
          configurePreset: release
          buildPreset: release

      - name: Package .zip (Windows
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path "${{ github.workspace }}\build\release\qct-convert.exe" -DestinationPath "qct-convert_windows_x64.zip"

      - name: Package .zip (MacOS & Ubuntu)
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        run: |
          zip qct-convert_${{ matrix.os-short }}_${{ matrix.architecture }}.zip ${{ github.workspace }}/build/release/qct-convert

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ matrix.os-short }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/*.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          fail_on_unmatched_files: true
          files: |
            artifacts/**/**/*.zip
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}